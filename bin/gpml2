#!/usr/bin/env bash

# see https://stackoverflow.com/a/246128/5354298
get_script_dir() { echo "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"; }
SCRIPT_DIR=$(get_script_dir)
LATEST_GPML_VERSION="2013a"

cleanup() {
  echo "done" > /dev/null
}

# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
PROGNAME=$(basename $0)
error_exit() {
#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------


  #echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  if [ ! "$1" ]; then
    echo "${PROGNAME}: Unknown Error" 1>&2
    read line file <<<$(caller)
    echo "An error occurred in line $line of file $file:" 1>&2
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${PROGNAME}: $1" 1>&2
  fi

  cleanup
  exit 1
}

trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

TOP_OPTS=$(getopt -o hv: --long help,version:,id:,pathway-version: \
             -n 'gpml2' -- "$@")
if [ $? != 0 ] ; then error_exit "Error: Failed to parse options." ; fi
# NOTE: keep the quotes
eval set -- "$TOP_OPTS"

HELP=false
VERSION=false
ID=
PATHWAY_VERSION=
while true; do
  case "$1" in
    -h | --help ) HELP=true; shift ;;
    -v | --version ) VERSION=true; shift ;;
    --id ) ID="$2"; shift 2 ;;
    --pathway-version ) PATHWAY_VERSION="$2"; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

if [ $VERSION == true ]; then
  # TODO: this is not a real version
  echo "1.0.0"
  exit 0
elif [ $HELP == true ]; then
  echo 'usage: gpml2 --version'
  echo '       gpml2 --help'
  echo '       gpml2 [--id] [--pathway-version] <input> [output] [scale=100]'
  echo '           If no output specified, all supported formats generated, as siblings of input.'
  echo '           "scale" is only valid for conversions to PNG format.'
  echo ' '
  echo 'examples on example data WP1243_69897.gpml:'
  exit 0
fi

path_in="$1"
path_out="$2"

if [ ! -f "$path_in" ]; then
  error_exit "Missing file '"$path_in"'"
fi

dir_in=$(dirname "$path_in")
base_in=$(basename -- "$path_in")
ext_in="${base_in##*.}"
stub_in="${base_in%.*}"

if [ -z "$ID" ] || [ -z "$PATHWAY_VERSION" ]; then
  wp_id="${stub_in%_*}"
  pathway_version_candidate="${stub_in##*_}"
  if [ -n "$wp_id" ] && [ -n "$pathway_version_candidate" ]; then
    ID="http://identifiers.org/wikipathways/$wp_id"
    PATHWAY_VERSION="$pathway_version_candidate"
  fi
fi

# if an output path isn't specified, we'll just convert to all the outputs.
if [ -z "$path_out" ]; then
  for format in json owl pdf png pwf react.svg svg txt; do
    out_f="$dir_in/$stub_in.$format"
    #"$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f";

    #"$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f" || exit 1;

    if ! "$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f" ; then
      echo "  Failed to complete the following conversion:" 1>&2;
      echo "    $SCRIPT_DIR/gpml2 \\" 1>&2;
      echo "    --id $ID \\" 1>&2;
      echo "    --pathway-version $PATHWAY_VERSION \\" 1>&2;
      echo "    $path_in \\" 1>&2;
      echo "    $path_in" 1>&2;
      exit 1;
    fi

    #"$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f" || \
    #  (echo "Error: $SCRIPT_DIR/gpml2 --id $ID --pathway-version $PATHWAY_VERSION $path_in $out_f" 1>&2; \
	#exit 1)

    #"$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f" || \
    # (echo "Error: $SCRIPT_DIR/gpml2 --id $ID --pathway-version $PATHWAY_VERSION $path_in $out_f"; \
	#exit 1)

    #"$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$out_f" || \
    #  error_exit "Error: $SCRIPT_DIR/gpml2 --id $ID --pathway-version $PATHWAY_VERSION $path_in $out_f" ;
  done
  exit 0
fi

dir_out=$(dirname "$path_out")
base_out=$(basename -- "$path_out")
ext_out="${base_out##*.}"
stub_out="${base_out%.*}"

gpml_f="$dir_in/$stub_in.gpml"

# TODO: which is better?
#xmlstarlet val "$f";
#if [ $? -eq 0 ]; then ... fi
is_valid=$((xmlstarlet val "$gpml_f" | grep ' valid') || echo '');
if [ ! "$is_valid" ]; then
  error_exit "Error: Invalid GPML for $gpml_f"
fi

ns=$(xmlstarlet sel -t -v "//namespace::*[name()='']" "$gpml_f" | head -n 1)
gpml_version="${ns##*/}"
if [ -z "$gpml_version" ]; then
  error_exit "Error: GPML namespace missing. Expecting '$LATEST_GPML_VERSION'"
elif [ "$gpml_version" != "$LATEST_GPML_VERSION" ]; then
  old_f="$dir_in/$stub_in.$gpml_version.gpml"
  mv "$gpml_f" "$old_f"
  pathvisio convert "$old_f" "$gpml_f"
fi

if [[ "$ext_out" =~ ^(gpml|owl|pdf|pwf|txt)$ ]]; then
  pathvisio convert "$path_in" "$path_out"
elif [[ "$ext_out" =~ ^(png)$ ]]; then
  # TODO: look at using --scale as an option (instead of an argument), for both pathvisio and gpml2.
  # TODO: move the setting of a default value for scale into pathvisio instead of here.
  # Setting default value of 100 if none is set
  scale=${3:-100}
  pathvisio convert "$path_in" "$path_out" "$scale"
elif [[ "$ext_out" =~ ^(json|jsonld)$ ]]; then
  organism=$(xmlstarlet sel -N gpml="http://pathvisio.org/GPML/$LATEST_GPML_VERSION" -t -v '/gpml:Pathway/@Organism' "$path_in" || echo '')
  # TODO: bridgedbjs fails when no xrefs are present. Update bridgedbjs to do this check:
  xref_identifiers=$((xmlstarlet sel -N gpml="http://pathvisio.org/GPML/$LATEST_GPML_VERSION" -t -v '/gpml:Pathway/gpml:DataNode/gpml:Xref/@ID' "$path_in" | sed '/^$/d') || echo '')

  if [ -z "$organism" ] || [ -z "$xref_identifiers" ]; then
    gpml2pvjson --id "$ID" --pathway-version "$PATHWAY_VERSION" < "$path_in" > "$path_out"
  else
    gpml2pvjson --id "$ID" --pathway-version "$PATHWAY_VERSION" < "$path_in" | \
      bridgedb xrefs -f json \
        -i '.entitiesById[].type' "$organism" '.entitiesById[].xrefDataSource' '.entitiesById[].xrefIdentifier' \
        ensembl hgnc.symbol ncbigene uniprot hmdb chebi wikidata \
      > "$path_out"
  fi

elif [[ "$ext_out" =~ ^(svg)$ ]]; then
  bare_stub_out="${base_out%%.*}"
  all_exts_out="${base_out#*.}"
  second_ext_out="${all_exts_out%.*}"

  json_f="$dir_out/$bare_stub_out.json"
  "$SCRIPT_DIR/gpml2" --id "$ID" --pathway-version "$PATHWAY_VERSION" "$path_in" "$json_f"

  if [[ "$base_out" =~ (react.svg)$ ]]; then
    pvjs --react < "$json_f" > "$path_out"
  else
    # TODO: specify actual height and width for stand-alone SVGs in pvjs instead of here
    pvjs < "$json_f" | \
      "xmlstarlet" ed -N svg='http://www.w3.org/2000/svg' -i '/svg:svg' --type attr -n width -v '800px' | \
      "xmlstarlet" ed -N svg='http://www.w3.org/2000/svg' -i '/svg:svg' --type attr -n height -v '600px' \
      > "$path_out"
    dark_f="$dir_out/$stub_out.dark.svg"
    pvjs --theme "dark" < "$json_f" | \
      "xmlstarlet" ed -N svg='http://www.w3.org/2000/svg' -i '/svg:svg' --type attr -n width -v '800px' | \
      "xmlstarlet" ed -N svg='http://www.w3.org/2000/svg' -i '/svg:svg' --type attr -n height -v '600px' \
      > "$dark_f"
  fi
else
  error_exit "Invalid output extension: '$ext_out'"
fi

exit 0
